Abbiamo implementato un algoritmo di ordinamento dei campioni tramite una versione parallela di Quicksort.
I nostri esperimenti computazionali mostrano che Quicksort parallelo risulta essere piú veloce rispetto all'ordinamento del campione fatto in modo iterativo utilizzando un solo  Processore.
Su 32 processori del Power7 la velocità di Quicksort parallela è più di ........
unità superiori della velocità del Quicksort Iterativo, con tempi di esecuzione più elevati del .........% rispetto all'ordinamento dei campioni.
L'algoritmo Quicksort parallelo che abbiamo implementato è una semplice estensione Quicksort, dove l'array di input viene suddiviso in parti uguali a tutti i processori, e ogni processore esegue una serie di Round che permettono di ordinare la parte assegnata ad ogni processore.
Una volta finito un round, sincronizza la parte dell'array a lui assegnato, inviando una richiesta non bloccante al proprio root che permettera di proseguire al prossimo round. Queste richieste permetteranno la comunicazione dello stato dei processori e dell'aggiornamento del array di partenza, che a causa della assenza della memoria condivisa ogni processore non sa se altri processori lavorano su stesse locazioni di memoria.


L'Algoritmo

Quicksort è un algoritmo di ordinamento sequenziale ampiamente ritenuto essere l'algoritmo di ordinamento sequenziale più veloce per un ampio set di input.
È un algoritmo ricorsivo che usa il metodo "Divide and Conquer" per ordinare tutti i valori. Quicksort standard preleva prima una chiave dall'elenco, il pivot e trova
la sua posizione nell'elenco in cui deve essere posizionata la chiave, nel nostro caso abbiamo implementato la funzione "PivotChoice" che seleziona 3 valori rand presi nel nostro array e calcola la media del massimo e minimo valore scelto. Una volta trovato il Pivot, avremo due possibilità:
-I valori minori al pivot saranno posizionati nella parte "inferiore" dell'array
-I valori maggiori o uguali saranno posizionati nella parte "superiore" dell'array


Descrizione

Supponiamo di disporre un array con N elementi, indicizzato da 0 a N-1 (i_arSize), da ordinare su un multiprocessore a memoria non condivisa, con processori asincroni MAX_PROCESSORS. 
Ad ogni processore viene assegnato un ndice univoco, pid, da 0 a P-1 (i_rank).

L'algoritmo parallelo Quicksort presentato è una parallelizzazione del
Quicksort. È un algoritmo a 3 + 1 round. I primi 3 round costituiscono il
divide la fase e sono eseguiti in modo ricorsivo. L'ultima fase è un ordinamento iterativo dell'algoritmo che i processori eseguono in parallelo, Le quattro fasi sono:
 i) la Partizione parallela dei Dati 
 ii) la Partizione sequenziale dei dati
  iii) la fase di partizione del processo (fase Ricorsiva del Round 1 e 2)
   iv) l'Ordinamento iterativo in parallelo 

Round 1:Partizione parallela dei dati.
L'algoritmo legge in input una serie di dati come un insieme di blocchi consecutivi di dimensioni i_arSize. 
******* 
i_arSize dipende dalla dimensione del sistema cache di primo livello, ed è selezionata in modo che due blocchi di lunghezza B possano essere contenuti nella cache in corrispondenza di contemporaneamente. Nel nostro sistema in cui la dimensione della cache di primo livello è 16 KB, abbiamo selezionato
B = 2048 in modo da essere in grado di adattare contemporaneamente due blocchi di dati nella cache. 
***********

Consideriamo prima di tutto il caso in cui tutti i valori possono essere divisi in blocchi, nel caso in cui un blocco non dovesse essere riempito completamente, eseguiremo il padding della parte rimante per completare il blocco. 
L'intero array può essere visto come una linea di N blocchi di dati; il processore P0 sceglie i blocchi su cui lavorare, dalle due estremità della linea.
La prima fase inizia con il processore P 0 , quello con il pid più piccolo, successivamente,il processore P0 invia ad ogni processore il blocco che trova fine del lato sinistro e poi il blocco che trova alla fine del lato destro e usa questi due blocchi insieme con il pivot come input per una funzione chiamata neutralize. 
 La funzione prende come input due blocchi, ar_left e ar_right e i_pivot e scambia i valori in leftblock se sono più grandi del pivot con i valori del blocco di destra che sono più piccoli del pivot. 
La chiamata del neutralize avrà uno dei seguenti risultati:
 i) tutti i valori nel blocco di sinistra saranno inferiori al pivot, in questo caso diciamo quel leftblock è stato neutralizzato 
  ii) tutti i valori nel blocco di destra saranno più grandi o uguali
del pivot, diciamo che il blocco di destra è stato neutralizzato, 
 iii) Sia leftblock che rightblock sono stati neutralizzati allo stesso
tempo. 

Una volta conclusa la prima chiamata di neutralize,ogni processore cercherà quindi di ottenere un nuovo blocco dal lato sinistro dell'array
se il suo blocco di sinistra è stato neutralizzato prima, o dal lato destro se il suo blocco di destra è stato neutralizzato prima e neutralizzerà il nuovo blocco con quello appena consegnato dal Processore P0. Se entrambi i blocchi sono stati neutralizzati, il processore P0 invierà i blocchi da entrambe le estremità.
I processori continuano i passaggi precedenti fino a quando non completano tutti i blocchi.
Infine avremo che, ogni processore ha al massimo un blocco non neutralizzato
e invia la sua copia al processore P0 che si occuperera ad aggiornare l'array iniziale.
Una volta aggiornato tutto l'array,i processori inviano a P0 un numero che contiene i blocchi di sinistra che sono stati neutralizzati, LN (Neutralizzato a sinistra) e un numero che contiene blocchi di destra che sono stati neutralizzati, RN (Neutralizzato a destra).
In questo caso ci saranno al massimo MAX_PROCESSORS di blocchi.

Round 2: partizione sequenziale dei dati

